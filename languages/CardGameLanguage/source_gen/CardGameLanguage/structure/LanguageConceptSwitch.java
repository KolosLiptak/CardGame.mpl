package CardGameLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Action = 0;
  public static final int And = 1;
  public static final int Argument = 2;
  public static final int Card = 3;
  public static final int CardReference = 4;
  public static final int Collection = 5;
  public static final int Command = 6;
  public static final int Comparator = 7;
  public static final int Deck = 8;
  public static final int Empty = 9;
  public static final int Equals = 10;
  public static final int Game = 11;
  public static final int IfExpression = 12;
  public static final int InputField = 13;
  public static final int InputFieldReference = 14;
  public static final int IntValue = 15;
  public static final int Kamu = 16;
  public static final int LogicalExpression = 17;
  public static final int Move = 18;
  public static final int MoveAll = 19;
  public static final int MoveSelected = 20;
  public static final int Not = 21;
  public static final int Operator = 22;
  public static final int Optional = 23;
  public static final int Or = 24;
  public static final int Phase = 25;
  public static final int Pile = 26;
  public static final int PileMethod = 27;
  public static final int PileReference = 28;
  public static final int Player = 29;
  public static final int Property = 30;
  public static final int PropertyReference = 31;
  public static final int PropertyReferenceArg = 32;
  public static final int Select = 33;
  public static final int SelectCard = 34;
  public static final int SelectPile = 35;
  public static final int SetValue = 36;
  public static final int Shuffle = 37;
  public static final int StringValue = 38;
  public static final int Token = 39;
  public static final int TopOf = 40;
  public static final int Turn = 41;
  public static final int Value = 42;
  public static final int While = 43;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xe94dfae4e9d04770L, 0x965c58db5e543504L);
    builder.put(0x26431eee60b75212L, Action);
    builder.put(0x26431eee60b81fc2L, And);
    builder.put(0x25174a6263f2b19bL, Argument);
    builder.put(0x568258613b824594L, Card);
    builder.put(0x25174a6263e6d407L, CardReference);
    builder.put(0x51c0e360de7b4083L, Collection);
    builder.put(0x26431eee60b7ca73L, Command);
    builder.put(0x25174a6263f04503L, Comparator);
    builder.put(0x568258613b8467c7L, Deck);
    builder.put(0x26431eee60b7ca49L, Empty);
    builder.put(0x25174a6263e0b7f0L, Equals);
    builder.put(0x39b65bcfb2f86776L, Game);
    builder.put(0x25174a6263dd595bL, IfExpression);
    builder.put(0x94fca76d696ce5cL, InputField);
    builder.put(0x94fca76d696ce6cL, InputFieldReference);
    builder.put(0x568258613b82ce75L, IntValue);
    builder.put(0x26431eee60b85597L, Kamu);
    builder.put(0x26431eee60b7ca3eL, LogicalExpression);
    builder.put(0x26431eee60b75215L, Move);
    builder.put(0x26431eee60b79ac9L, MoveAll);
    builder.put(0x26431eee60b7b86cL, MoveSelected);
    builder.put(0x26431eee60b7ca3dL, Not);
    builder.put(0x26431eee60b81fbcL, Operator);
    builder.put(0x26431eee60b85598L, Optional);
    builder.put(0x26431eee60b81fc3L, Or);
    builder.put(0x26431eee60b1bc56L, Phase);
    builder.put(0x39b65bcfb2f83152L, Pile);
    builder.put(0x25174a6263f7de45L, PileMethod);
    builder.put(0x25174a6263f7de4bL, PileReference);
    builder.put(0x39b65bcfb2f7900fL, Player);
    builder.put(0x568258613b82e0a7L, Property);
    builder.put(0x25174a6263ec6f50L, PropertyReference);
    builder.put(0x25174a6263f42e25L, PropertyReferenceArg);
    builder.put(0x26431eee60b88f78L, Select);
    builder.put(0x26431eee60b88f7cL, SelectCard);
    builder.put(0x26431eee60b88f79L, SelectPile);
    builder.put(0x25174a6263eb49dbL, SetValue);
    builder.put(0x26431eee60b76900L, Shuffle);
    builder.put(0x568258613b82ce76L, StringValue);
    builder.put(0x568258613b824595L, Token);
    builder.put(0x25174a6263f7de44L, TopOf);
    builder.put(0x26431eee60b82ce6L, Turn);
    builder.put(0x568258613b82ce7bL, Value);
    builder.put(0x26431eee60b7ca4aL, While);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
