package CardGameLanguage.sandbox;

/*Generated by MPS */

import Runtime.JavaCode.Card;
import Runtime.JavaCode.DeckRuntime;
import Runtime.JavaCode.Property;

public class FranciaKartya extends Card {
  public static DeckRuntime deckRuntime = new DeckRuntime();
  public void init() {
    {
      Card AceOfSpades = new Card("AceOfSpades");
      deckRuntime.addCard(AceOfSpades);
      AceOfSpades.addProperty(new Property("Value", 1));
      AceOfSpades.addProperty(new Property("Suit", "Spades"));

    }
    {
      Card TwoOfSpades = new Card("TwoOfSpades");
      deckRuntime.addCard(TwoOfSpades);
      TwoOfSpades.addProperty(new Property("Value", 2));
      TwoOfSpades.addProperty(new Property("Suit", "Spades"));

    }
    {
      Card ThreeOfSpades = new Card("ThreeOfSpades");
      deckRuntime.addCard(ThreeOfSpades);
      ThreeOfSpades.addProperty(new Property("Value", 3));
      ThreeOfSpades.addProperty(new Property("Suit", "Spades"));

    }
    {
      Card FourOfSpades = new Card("FourOfSpades");
      deckRuntime.addCard(FourOfSpades);
      FourOfSpades.addProperty(new Property("Value", 4));
      FourOfSpades.addProperty(new Property("Suit", "Spades"));

    }
    {
      Card FiveOfSpades = new Card("FiveOfSpades");
      deckRuntime.addCard(FiveOfSpades);
      FiveOfSpades.addProperty(new Property("Value", 5));
      FiveOfSpades.addProperty(new Property("Suit", "Spades"));

    }
    {
      Card SixOfSpades = new Card("SixOfSpades");
      deckRuntime.addCard(SixOfSpades);
      SixOfSpades.addProperty(new Property("Value", 6));
      SixOfSpades.addProperty(new Property("Suit", "Spades"));

    }
    {
      Card SevenOfSpades = new Card("SevenOfSpades");
      deckRuntime.addCard(SevenOfSpades);
      SevenOfSpades.addProperty(new Property("Value", 7));
      SevenOfSpades.addProperty(new Property("Suit", "Spades"));

    }
    {
      Card EightOfSpades = new Card("EightOfSpades");
      deckRuntime.addCard(EightOfSpades);
      EightOfSpades.addProperty(new Property("Value", 8));
      EightOfSpades.addProperty(new Property("Suit", "Spades"));

    }
    {
      Card NineOfSpades = new Card("NineOfSpades");
      deckRuntime.addCard(NineOfSpades);
      NineOfSpades.addProperty(new Property("Value", "9"));
      NineOfSpades.addProperty(new Property("Suit", "Spades"));

    }
    {
      Card TenOfSpades = new Card("TenOfSpades");
      deckRuntime.addCard(TenOfSpades);
      TenOfSpades.addProperty(new Property("Value", 10));
      TenOfSpades.addProperty(new Property("Suit", "Spades"));

    }
    {
      Card JackOfSpades = new Card("JackOfSpades");
      deckRuntime.addCard(JackOfSpades);
      JackOfSpades.addProperty(new Property("Value", 11));
      JackOfSpades.addProperty(new Property("Suit", "Spades"));

    }
    {
      Card QueenOfSpades = new Card("QueenOfSpades");
      deckRuntime.addCard(QueenOfSpades);
      QueenOfSpades.addProperty(new Property("Value", 12));
      QueenOfSpades.addProperty(new Property("Suit", "Spades"));

    }
    {
      Card KingOfSpades = new Card("KingOfSpades");
      deckRuntime.addCard(KingOfSpades);
      KingOfSpades.addProperty(new Property("Value", 13));
      KingOfSpades.addProperty(new Property("Suit", "Spades"));

    }
    {
      Card AceOfClubs = new Card("AceOfClubs");
      deckRuntime.addCard(AceOfClubs);
      AceOfClubs.addProperty(new Property("Value", 1));
      AceOfClubs.addProperty(new Property("Suit", "Clubs"));

    }
    {
      Card TwoOfClubs = new Card("TwoOfClubs");
      deckRuntime.addCard(TwoOfClubs);
      TwoOfClubs.addProperty(new Property("Value", 2));
      TwoOfClubs.addProperty(new Property("Suit", "Clubs"));

    }
    {
      Card ThreeOfClubs = new Card("ThreeOfClubs");
      deckRuntime.addCard(ThreeOfClubs);
      ThreeOfClubs.addProperty(new Property("Value", "3"));
      ThreeOfClubs.addProperty(new Property("Suit", "Clubs"));

    }
    {
      Card FourOfClubs = new Card("FourOfClubs");
      deckRuntime.addCard(FourOfClubs);
      FourOfClubs.addProperty(new Property("Value", 4));
      FourOfClubs.addProperty(new Property("Suit", "Clubs"));

    }
    {
      Card FiveOfClubs = new Card("FiveOfClubs");
      deckRuntime.addCard(FiveOfClubs);
      FiveOfClubs.addProperty(new Property("Value", 5));
      FiveOfClubs.addProperty(new Property("Suit", "Clubs"));

    }
    {
      Card SixOfClubs = new Card("SixOfClubs");
      deckRuntime.addCard(SixOfClubs);
      SixOfClubs.addProperty(new Property("Value", 6));
      SixOfClubs.addProperty(new Property("Suit", "Clubs"));

    }
    {
      Card SevenOfClubs = new Card("SevenOfClubs");
      deckRuntime.addCard(SevenOfClubs);
      SevenOfClubs.addProperty(new Property("Value", 7));
      SevenOfClubs.addProperty(new Property("Suit", "Clubs"));

    }
    {
      Card EightOfClubs = new Card("EightOfClubs");
      deckRuntime.addCard(EightOfClubs);
      EightOfClubs.addProperty(new Property("Value", 8));
      EightOfClubs.addProperty(new Property("Suit", "Clubs"));

    }
    {
      Card NineOfClubs = new Card("NineOfClubs");
      deckRuntime.addCard(NineOfClubs);
      NineOfClubs.addProperty(new Property("Value", 9));
      NineOfClubs.addProperty(new Property("Suit", "Clubs"));

    }
    {
      Card TenOfClubs = new Card("TenOfClubs");
      deckRuntime.addCard(TenOfClubs);
      TenOfClubs.addProperty(new Property("Value", 10));
      TenOfClubs.addProperty(new Property("Suit", "Clubs"));

    }
    {
      Card JackOfClubs = new Card("JackOfClubs");
      deckRuntime.addCard(JackOfClubs);
      JackOfClubs.addProperty(new Property("Value", 11));
      JackOfClubs.addProperty(new Property("Suit", "Clubs"));

    }
    {
      Card QueenOfClubs = new Card("QueenOfClubs");
      deckRuntime.addCard(QueenOfClubs);
      QueenOfClubs.addProperty(new Property("Value", 12));
      QueenOfClubs.addProperty(new Property("Suit", "Clubs"));

    }
    {
      Card KingOfClubs = new Card("KingOfClubs");
      deckRuntime.addCard(KingOfClubs);
      KingOfClubs.addProperty(new Property("Value", 13));
      KingOfClubs.addProperty(new Property("Suit", "Clubs"));

    }
    {
      Card AceOfDiamonds = new Card("AceOfDiamonds");
      deckRuntime.addCard(AceOfDiamonds);
      AceOfDiamonds.addProperty(new Property("Value", 1));
      AceOfDiamonds.addProperty(new Property("Suit", "Diamonds"));

    }
    {
      Card TwoOfDiamonds = new Card("TwoOfDiamonds");
      deckRuntime.addCard(TwoOfDiamonds);
      TwoOfDiamonds.addProperty(new Property("Value", 2));
      TwoOfDiamonds.addProperty(new Property("Suit", "Diamonds"));

    }
    {
      Card ThreeOfDiamonds = new Card("ThreeOfDiamonds");
      deckRuntime.addCard(ThreeOfDiamonds);
      ThreeOfDiamonds.addProperty(new Property("Value", 3));
      ThreeOfDiamonds.addProperty(new Property("Suit", "Diamonds"));

    }
    {
      Card FourOfDiamonds = new Card("FourOfDiamonds");
      deckRuntime.addCard(FourOfDiamonds);
      FourOfDiamonds.addProperty(new Property("Value", 4));
      FourOfDiamonds.addProperty(new Property("Suit", "Diamonds"));

    }
    {
      Card FiveOfDiamonds = new Card("FiveOfDiamonds");
      deckRuntime.addCard(FiveOfDiamonds);
      FiveOfDiamonds.addProperty(new Property("Value", 5));
      FiveOfDiamonds.addProperty(new Property("Suit", "Diamonds"));

    }
    {
      Card SixOfDiamonds = new Card("SixOfDiamonds");
      deckRuntime.addCard(SixOfDiamonds);
      SixOfDiamonds.addProperty(new Property("Value", 6));
      SixOfDiamonds.addProperty(new Property("Suit", "Diamonds"));

    }
    {
      Card SevenOfDiamonds = new Card("SevenOfDiamonds");
      deckRuntime.addCard(SevenOfDiamonds);
      SevenOfDiamonds.addProperty(new Property("Value", 7));
      SevenOfDiamonds.addProperty(new Property("Suit", "Diamonds"));

    }
    {
      Card EightOfDiamonds = new Card("EightOfDiamonds");
      deckRuntime.addCard(EightOfDiamonds);
      EightOfDiamonds.addProperty(new Property("Value", 8));
      EightOfDiamonds.addProperty(new Property("Suit", "Diamonds"));

    }
    {
      Card NineOfDiamonds = new Card("NineOfDiamonds");
      deckRuntime.addCard(NineOfDiamonds);
      NineOfDiamonds.addProperty(new Property("Value", 9));
      NineOfDiamonds.addProperty(new Property("Suit", "Diamonds"));

    }
    {
      Card TenOfDiamonds = new Card("TenOfDiamonds");
      deckRuntime.addCard(TenOfDiamonds);
      TenOfDiamonds.addProperty(new Property("Value", 10));
      TenOfDiamonds.addProperty(new Property("Suit", "Diamonds"));

    }
    {
      Card JackOfDiamonds = new Card("JackOfDiamonds");
      deckRuntime.addCard(JackOfDiamonds);
      JackOfDiamonds.addProperty(new Property("Value", 11));
      JackOfDiamonds.addProperty(new Property("Suit", "Diamonds"));

    }
    {
      Card QueenOfDiamonds = new Card("QueenOfDiamonds");
      deckRuntime.addCard(QueenOfDiamonds);
      QueenOfDiamonds.addProperty(new Property("Value", 12));
      QueenOfDiamonds.addProperty(new Property("Suit", "Diamonds"));

    }
    {
      Card KingOfDiamonds = new Card("KingOfDiamonds");
      deckRuntime.addCard(KingOfDiamonds);
      KingOfDiamonds.addProperty(new Property("Value", 13));
      KingOfDiamonds.addProperty(new Property("Suit", "Diamonds"));

    }
    {
      Card AceOfHearts = new Card("AceOfHearts");
      deckRuntime.addCard(AceOfHearts);
      AceOfHearts.addProperty(new Property("Value", 1));
      AceOfHearts.addProperty(new Property("Suit", "Hearts"));

    }
    {
      Card TwoOfHearts = new Card("TwoOfHearts");
      deckRuntime.addCard(TwoOfHearts);
      TwoOfHearts.addProperty(new Property("Value", 2));
      TwoOfHearts.addProperty(new Property("Suit", "Hearts"));

    }
    {
      Card ThreeOfHearts = new Card("ThreeOfHearts");
      deckRuntime.addCard(ThreeOfHearts);
      ThreeOfHearts.addProperty(new Property("Value", 3));
      ThreeOfHearts.addProperty(new Property("Suit", "Hearts"));

    }
    {
      Card FourOfHearts = new Card("FourOfHearts");
      deckRuntime.addCard(FourOfHearts);
      FourOfHearts.addProperty(new Property("Value", 4));
      FourOfHearts.addProperty(new Property("Suit", "Hearts"));

    }
    {
      Card FiveOfHearts = new Card("FiveOfHearts");
      deckRuntime.addCard(FiveOfHearts);
      FiveOfHearts.addProperty(new Property("Value", 5));
      FiveOfHearts.addProperty(new Property("Suit", "Hearts"));

    }
    {
      Card SixOfHearts = new Card("SixOfHearts");
      deckRuntime.addCard(SixOfHearts);
      SixOfHearts.addProperty(new Property("Value", 6));
      SixOfHearts.addProperty(new Property("Suit", "Hearts"));

    }
    {
      Card SevenOfHearts = new Card("SevenOfHearts");
      deckRuntime.addCard(SevenOfHearts);
      SevenOfHearts.addProperty(new Property("Value", 7));
      SevenOfHearts.addProperty(new Property("Suit", "Hearts"));

    }
    {
      Card EightOfHearts = new Card("EightOfHearts");
      deckRuntime.addCard(EightOfHearts);
      EightOfHearts.addProperty(new Property("Value", 8));
      EightOfHearts.addProperty(new Property("Suit", "Hearts"));

    }
    {
      Card NineOfHearts = new Card("NineOfHearts");
      deckRuntime.addCard(NineOfHearts);
      NineOfHearts.addProperty(new Property("Value", 9));
      NineOfHearts.addProperty(new Property("Suit", "Hearts"));

    }
    {
      Card TenOfHearts = new Card("TenOfHearts");
      deckRuntime.addCard(TenOfHearts);
      TenOfHearts.addProperty(new Property("Value", 10));
      TenOfHearts.addProperty(new Property("Suit", "Hearts"));

    }
    {
      Card JackOfHearts = new Card("JackOfHearts");
      deckRuntime.addCard(JackOfHearts);
      JackOfHearts.addProperty(new Property("Value", 11));
      JackOfHearts.addProperty(new Property("Suit", "Hearts"));

    }
    {
      Card QueenOfHearts = new Card("QueenOfHearts");
      deckRuntime.addCard(QueenOfHearts);
      QueenOfHearts.addProperty(new Property("Value", 12));
      QueenOfHearts.addProperty(new Property("Suit", "Hearts"));

    }
    {
      Card KingOfHearts = new Card("KingOfHearts");
      deckRuntime.addCard(KingOfHearts);
      KingOfHearts.addProperty(new Property("Value", 13));
      KingOfHearts.addProperty(new Property("Suit", "Hearts"));

    }
  }

}
